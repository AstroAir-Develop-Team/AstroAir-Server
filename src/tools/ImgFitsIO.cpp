/*
 * ImgFitsIO.cpp
 * 
 * Copyright (C) 2020-2021 Max Qian
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
 
/************************************************* 
 
Copyright: 2020-2021 Max Qian. All rights reserved
 
Author:Max Qian

E-mail:astro_air@126.com
 
Date:2021-6-28
 
Description:FitsIO Port
 
**************************************************/

#include "ImgFitsIO.h"
#include "../logger.h"

#include <string.h>

namespace AstroAir::FitsIO
{
    int status; //cFitsio状态

    bool SaveFitsImage(unsigned char *imgBuf,const char * ImageName,int Image_Type,bool isColor,int ImageHeight,int ImageWidth,const char* CameraName,int Expo,int Bin,int Offset,int Gain,double Temp)
    {
        fitsfile * fptr = nullptr;
        long naxes[2] = {ImageWidth, ImageHeight};
        long nelements = naxes[0] * naxes[1];
        long naxis = 2;
        size_t memsize = 5760;
        void * memptr = malloc(memsize);
        if(!memptr)
        {
            IDLog_Error(_("Failed to allocate memory: %lu"), memsize);
            return false;
        }

        fits_create_memfile(&fptr, &memptr, &memsize, 2880, realloc, &status);
        if(status)
        {
            FitsImageError(fptr);
            free(memptr);
            return false;
        }
        //创建Fits文件
        fits_create_file(&fptr, ImageName, &status);
        if (Image_Type == 1)
            fits_create_img(fptr, USHORT_IMG, naxis, naxes, &status); //16位
        else
            fits_create_img(fptr, BYTE_IMG, naxis, naxes, &status); //8位或12位
        if(status)
        {
            FitsImageError(fptr);
            free(memptr);
            return false;
        }
        //写入文件信息
        AddImageKeywords(fptr,ImageName,ImageHeight,ImageWidth,CameraName,Expo,Bin,Offset,Gain,Temp);
        //将缓存图像写入文件
        if (Image_Type == 1)
            fits_write_img(fptr, TUSHORT, 1, nelements, &imgBuf[0], &status); //16位
        else
            fits_write_img(fptr, TBYTE, 1, nelements, &imgBuf[0], &status); //8位或12位
        if(status)
        {
            FitsImageError(fptr);
            free(memptr);
            return false;
        }
        //关闭Fits图像
        fits_close_file(fptr, &status);
        if(status)
        {
            FitsImageError(fptr);
            free(memptr);
            return false;
        }
        return true;
    }

    void AddImageKeywords(fitsfile * fptr,const char* ImageName,int ImageHeight,int ImageWidth,const char* CameraName,int Expo,int Bin,int Offset,int Gain,double Temp)
    {
        fits_update_key_str(fptr, "Name:",ImageName , "Name of Image", &status);
        fits_update_key_lng(fptr, "Width:",ImageWidth, "Width of Image" , &status);
        fits_update_key_lng(fptr, "Height:",ImageHeight, "Height of Image",&status);
        fits_update_key_str(fptr, "Camera:",CameraName, "Camera's Name", &status);
        fits_update_key_lng(fptr, "Exposure:",Expo, "Time" , &status);
        fits_update_key_lng(fptr, "BinMode:",Bin, "Bin", &status);
        fits_update_key_lng(fptr, "Offset:",Offset, "Brightness", &status);
        fits_update_key_lng(fptr, "Gain:",Gain, "Gain", &status);
        fits_update_key_lng(fptr, "Temperature:",Temp, "Camera's Temperature", &status);
        fits_write_comment(fptr, "Generated by AstroAir", &status);
    }

    void FitsImageError(fitsfile * fptr)
    {
        char error_status[2048];
        fits_report_error(stderr, status);
        fits_get_errstatus(status, error_status);
        fits_close_file(fptr, &status);
        IDLog_Error(_("FITS Error: %s"), error_status);
    }
}